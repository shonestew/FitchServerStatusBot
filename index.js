const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const fs = require('fs');
require('dotenv').config();

const info = JSON.parse(fs.readFileSync('servers_info.json', {
    encoding: "utf-8"
}));

function saveInfo(info) {
    try {
        fs.writeFileSync("servers_info.json", JSON.stringify(info, null, 2));
    } catch (e) {
        console.log(e);
    };
};

async function isAdmin(ctx) {
    const chatId = ctx.message.chat.id;
    const userId = ctx.message.from.id;
    try {
        const member = await ctx.telegram.getChatMember(chatId, userId);
        return member.status === 'administrator' || member.status === 'creator';
    } catch (error) {
        console.error('Error fetching chat member:', error);
        return false;
    };
};

const bot = new Telegraf(process.env.TOKEN);

bot.command('addserver', async (ctx) => {
    const chatId = ctx.message.chat.id;
    const args = ctx.message.text.slice(1).split(' ');
    const ip = args[1];
    const port = args[2];
    const slot = parseInt(args[3], 10) - 1;
    const adminCheck = await isAdmin(ctx);
    if (ctx.message.chat.type == 'private') return;
    if (!adminCheck) return;

    if (!info[chatId]) {
        info[chatId] = [];
    };

    if (slot < 0 || slot > 2) {
        await ctx.telegram.sendMessage(chatId, '‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç!');
    } else if (!ip || !port || isNaN(slot)) {
        await ctx.telegram.sendMessage(chatId, '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!');
    } else if (info[chatId][slot]) {
        await ctx.telegram.sendMessage(chatId, '‚ùå –í –¥–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ!');
    } else if (isNaN(port)) {
        await ctx.telegram.sendMessage(chatId, '‚ùå –ü–æ—Ä—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.');
    } else {
        info[chatId][slot] = {
            ip,
            port
        };
        saveInfo(info);
        ctx.telegram.sendMessage(chatId, 'üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    };
});

bot.command('status', async (ctx) => {
    const chatId = ctx.message.chat.id;
    const args = ctx.message.text.slice(1).split(' ');
    const slot = parseInt(args[1], 10) - 1;
    if (slot > -1 || slot < 3) {
        let ip = info[chatId]?.[slot]?.ip;
        let port = info[chatId]?.[slot]?.port;
        let res_temp = await axios.get(`https://api.mcsrvstat.us/bedrock/3/${ip}:${port}`)
        let res = res_temp.data;
        let stat;
        if (ctx.message.chat.type == 'private') return;

        if (!ip || !port) {
            ctx.telegram.sendMessage(chatId, 'üòî –í —Å–ª–æ—Ç–µ ‚Ññ2 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            return;
        };

        if (res.online === true) {
            stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`;
        } else {
            stat = '–æ—Ç–∫–ª—é—á—ë–Ω.';
        };
        await ctx.telegram.sendMessage(chatId, `üîå–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ${slot + 1} - ${stat}`, {
            parse_mode: 'HTML'
        });
    } else if (!slot) {
        await ctx.telegram.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂—ã–π —Å–ª–æ—Ç –Ω–∏–∂–µ –¥–∞–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å:', Markup.inlineKeyboard([
            [Markup.button.callback('–°–ª–æ—Ç ‚Ññ1', 'serv1')],
            [Markup.button.callback('–°–ª–æ—Ç ‚Ññ2', 'serv2')],
            [Markup.button.callback('–°–ª–æ—Ç ‚Ññ3', 'serv3')]
        ]));
    };
});

bot.on("callback_query", async (ctx) => {
    const chatId = ctx.update.callback_query.message.chat.id;
    const callId = ctx.update.callback_query.data;

    if (callId == 'serv1') {
        let ip = info[chatId]?.[0]?.ip;
        let port = info[chatId]?.[0]?.port;
        let res_temp = await axios.get(`https://api.mcsrvstat.us/bedrock/3/${ip}:${port}`)
        let res = res_temp.data;
        let stat;

        if (!ip || !port) {
            ctx.editMessageText('üòî –í —Å–ª–æ—Ç–µ ‚Ññ1 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            return;
        };

        if (res.online === true) {
            stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`
        } else {
            stat = '–æ—Ç–∫–ª—é—á—ë–Ω.'
        };
        await ctx.editMessageText(`üîå–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ1 - ${stat}`, {
            parse_mode: 'HTML'
        });
    } else if (callId == 'serv2') {
        let ip = info[chatId]?.[1]?.ip;
        let port = info[chatId]?.[1]?.port;
        let res_temp = await axios.get(`https://api.mcsrvstat.us/bedrock/3/${ip}:${port}`)
        let res = res_temp.data;
        let stat;

        if (!ip || !port) {
            ctx.editMessageText('üòî –í —Å–ª–æ—Ç–µ ‚Ññ2 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            return;
        };

        if (res.online === true) {
            stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`;
        } else {
            stat = '–æ—Ç–∫–ª—é—á—ë–Ω.';
        };
        await ctx.editMessageText(`üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ2 - ${stat}`, {
            parse_mode: 'HTML'
        });
    } else if (callId == 'serv3') {
        let ip = info[chatId]?.[2]?.ip;
        let port = info[chatId]?.[2]?.port;
        let res_temp = await axios.get(`https://api.mcsrvstat.us/bedrock/3/${ip}:${port}`)
        let res = res_temp.data;
        let stat;

        if (!ip || !port) {
            ctx.editMessageText('üòî –í —Å–ª–æ—Ç–µ ‚Ññ3 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            return;
        };

        if (res.online === true) {
            stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`;
        } else {
            stat = '–æ—Ç–∫–ª—é—á—ë–Ω.';
        };
        await ctx.editMessageText(`üîå–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ3 - ${stat}`, {
            parse_mode: 'HTML'
        });
    };
});

bot.command("deleteserver", async (ctx) => {
    const chatId = ctx.message.chat.id;
    const args = ctx.message.text.slice(1).split(' ')
    const serverInfo = info;
    const slot = parseInt(args[1]) - 1;
    const adminCheck = await isAdmin(ctx);
    if (ctx.message.chat.type == 'private') return;
    if (!adminCheck) return;

    if (slot < 0 || slot > 2) {
        await ctx.telegram.sendMessage(chatId, '‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç!');
    } else if (!info[chatId][slot]) {
        await ctx.telegram.sendMessage(chatId, '‚ùå –í –¥–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –Ω–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —Å–µ—Ä–≤–µ—Ä–µ!');
    } else {
        delete serverInfo[chatId][slot];
        saveInfo(serverInfo);
        await ctx.telegram.sendMessage(chatId, 'üóë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ —É–¥–∞–ª–µ–Ω–∞!');
    };
});

bot.command("help", async (ctx) => {
    await bot.telegram.sendMessage(ctx.message.chat.id, `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"<code>/addserver (–∞–π–ø–∏) (–ø–æ—Ä—Ç) (—Å–ª–æ—Ç, –Ω–µ –±–æ–ª—å—à–µ 3)</code>" - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ —Å–ø–∏—Å–æ–∫(—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - "<code>/addserver example.com 19132 1</code>".\n"<code>/status</code>"/status - –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç –º–µ–Ω—é —Å —Å–ª–æ—Ç–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞.\n"<code>/deleteserver (—Å–ª–æ—Ç, –Ω–µ –±–æ–ª—å—à–µ 3)</code>" - —É–¥–∞–ª—è–µ—Ç —Ö–æ—Å—Ç(—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\nüÜî –ê–π–¥–∏ —á–∞—Ç–∞(–µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç): "${ctx.message.chat.id}";`, {
        parse_mode: "HTML"
    });
});

bot.launch();
