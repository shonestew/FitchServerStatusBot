// –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –Ω–∏–∂–µ –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –ø–æ–¥–Ω–∏–º–∞—Ç—å –±–æ—Ç–∞, –∏ –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤ –ø–æ —Ç–∏–ø—É Render –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.
const keep_alive = require('./keep_alive.js');
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const fs = require('fs');
const MongoClient = require("mongodb").MongoClient;
require('dotenv').config();

async function isAdmin(ctx) {
    const chatId = ctx.message.chat.id;
    const userId = ctx.message.from.id;
    try {
        const member = await ctx.telegram.getChatMember(chatId, userId);
        return member.status === 'administrator' || member.status === 'creator';
    } catch (error) {
        console.error('–ø—Ä–æ–±–ª–µ–º–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –∞–¥–º–∏–Ω–∞:', error);
        return false;
    };
};

async function serverStatus(ip, port) {
    try {
        const res_java = await (await axios.get(`http://api.mcsrvstat.us/3/${ip}:${port}`)).data;
        const res_be = await (await axios.get(`http://api.mcsrvstat.us/bedrock/3/${ip}:${port}`)).data;
        if (res_java.online === true) {
            return res_java;
        } else if (res_be.online === true) {
            return res_be;
        } else {
            return false;
        };
    } catch (e) {
        console.log(e);
    };
};

const bot = new Telegraf(process.env.TOKEN);

const mdb = new MongoClient(process.env.URL);

bot.command('addserver', async (ctx) => {
    try {
        await mdb.connect();
        const chatId = ctx.message.chat.id.toString();
        const args = ctx.message.text.slice(1).split(' ');
        const ip = args[1];
        const port = args[2];
        const slot = parseInt(args[3], 10);
        const adminCheck = await isAdmin(ctx);
        const coll = mdb.db(process.env.DB).collection(`servers${slot}`);
        const findColl = await coll.find({ chatId }).toArray();

        if (ctx.message.chat.type === 'private') return;

        if (!adminCheck) return;

        if (slot < 1 || slot > 3) {
            await ctx.telegram.sendMessage(chatId, '‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç!');
        } else if (!ip || !port || isNaN(slot)) {
            await ctx.telegram.sendMessage(chatId, '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!');
        } else if (findColl.length >= 1) {
            await ctx.telegram.sendMessage(chatId, '‚ùå –í –¥–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ!');
        } else {
            await coll.insertOne({chatId, ip, port});
            ctx.telegram.sendMessage(chatId, 'üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        };
    } catch (e) {
        console.log(e);
    } finally {
        await mdb.close();
    };
});

bot.command('status', async (ctx) => {
    try {
        await mdb.connect();
        const chatId = ctx.message.chat.id.toString();
        const args = ctx.message.text.slice(1).split(' ');
        const slot = parseInt(args[1], 10);
        const coll = mdb.db(process.env.DB).collection(`servers${slot}`);
        const findColl = await coll.find({ chatId }).toArray();

        if (ctx.message.chat.type === 'private') return;

        if (slot > -1 || slot < 3) {
            const ip = findColl[0].ip;
            const port = findColl[0].port;
            const res = await serverStatus(ip, port);
            let stat;

            if (!ip || !port) {
                ctx.editMessageText(`üòî –í —Å–ª–æ—Ç–µ ‚Ññ${slot} –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.`);
                return;
            };

            if (res.online === false) {
                stat = `–æ—Ç–∫–ª—é—á—ë–Ω.\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>.`
            } else {
                stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`
            };

            await ctx.telegram.sendMessage(chatId, `üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ${slot} - ${stat}`, {
                parse_mode: 'HTML'
            });
        } else if (!slot) {
            await ctx.telegram.sendMessage(chatId, 'üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç –Ω–∏–∂–µ –¥–∞–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å:', Markup.inlineKeyboard([
                [Markup.button.callback('üìÇ –°–ª–æ—Ç ‚Ññ1', 'serv1')],
                [Markup.button.callback('üìÇ –°–ª–æ—Ç ‚Ññ2', 'serv2')],
                [Markup.button.callback('üìÇ –°–ª–æ—Ç ‚Ññ3', 'serv3')]
            ]));
        };
    } catch (e) {
        console.log(e);
    } finally {
        await mdb.close();
    };
});

bot.command("deleteserver", async (ctx) => {
    try {
        await mdb.connect();
        const chatId = ctx.message.chat.id.toString();
        const args = ctx.message.text.slice(1).split(' ');
        const slot = parseInt(args[1]);
        const adminCheck = await isAdmin(ctx);
        const coll = mdb.db(process.env.DB).collection(`servers${slot}`);
        const findColl = await coll.find({ chatId }).toArray();

        if (ctx.message.chat.type === 'private') return;

        if (!adminCheck) return;

        if (isNaN(slot) || slot < 1 || slot > 3) {
            await ctx.telegram.sendMessage(chatId, '‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç!');
        } else if (findColl.length > 1) {
            await ctx.telegram.sendMessage(chatId, '‚ùå –í –¥–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –Ω–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —Å–µ—Ä–≤–µ—Ä–µ!');
        } else {
            await coll.deleteMany({ chatId });
            await ctx.telegram.sendMessage(chatId, 'üóë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Å–µ—Ä–≤–µ—Ä–µ —É–¥–∞–ª–µ–Ω–∞!');
        };
    } catch (e) {
        console.log(e);
    } finally {
        await mdb.close();
    };
});

bot.command("help", async (ctx) => {
    await ctx.telegram.sendMessage(ctx.message.chat.id, 'üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–∞–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ –Ω–µ–≥–æ:', Markup.inlineKeyboard([
        [Markup.button.callback('üîå /status', 'status')],
        [Markup.button.callback('üíæ /addserver', 'addserver')],
        [Markup.button.callback('üóë /deleteserver', 'deleteserver')]
    ]));
});

bot.on("callback_query", async (ctx) => {
    try {
        await mdb.connect();
        const chatId = ctx.update.callback_query.message.chat.id.toString();
        const callId = ctx.update.callback_query.data;

        // –ù–∏–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ—Ç—ã.
        if (callId === 'serv1') {
            const coll = mdb.db(process.env.DB).collection('servers1');
            const findColl = await coll.find({ chatId }).toArray();

            if (!findColl[0].ip && !findColl[0].port) {
                await ctx.editMessageText('üòî –í —Å–ª–æ—Ç–µ ‚Ññ1 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            };

            const ip = findColl[0].ip;
            const port = findColl[0].port;
            const res = await serverStatus(ip, port);
            let stat;

            if (res.online === false) {
                stat = `–æ—Ç–∫–ª—é—á—ë–Ω.\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>.`
            } else {
                stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`
            };

            await ctx.editMessageText(`üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ1 - ${stat}`, {
                parse_mode: 'HTML'
            });
        } else if (callId === 'serv2') {
            const coll = mdb.db(process.env.DB).collection('servers2');
            const findColl = await coll.find({ chatId }).toArray();

            if (!findColl[0].ip && !findColl[0].port) {
                await ctx.editMessageText('üòî –í —Å–ª–æ—Ç–µ ‚Ññ2 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            };

            const ip = findColl[0].ip;
            const port = findColl[0].port;
            const res = await serverStatus(ip, port);
            let stat;

            if (res.online === false) {
                stat = `–æ—Ç–∫–ª—é—á—ë–Ω.\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>.`
            } else {
                stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`
            };

            await ctx.editMessageText(`üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ2 - ${stat}`, {
                parse_mode: 'HTML'
            });
        } else if (callId === 'serv3') {
            const coll = mdb.db(process.env.DB).collection('servers3');
            const findColl = await coll.find({ chatId }).toArray();

            if (!findColl[0].ip && !findColl[0].port) {
                await ctx.editMessageText('üòî –í —Å–ª–æ—Ç–µ ‚Ññ3 –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
            };

            const ip = findColl[0].ip;
            const port = findColl[0].port;
            const res = await serverStatus(ip, port);
            let stat;

            if (res.online === false) {
                stat = `–æ—Ç–∫–ª—é—á—ë–Ω.\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>.`
            } else {
                stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`
            };

            await ctx.editMessageText(`üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ—Ç–µ ‚Ññ3 - ${stat}`, {
                parse_mode: 'HTML'
            });
        // –ù–∏–∂–µ —Ç—É—Ç–æ—Ä—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.
        } else if (callId === 'status') {
            await ctx.editMessageText('–ö–æ–º–∞–Ω–¥–∞ \/status –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ–± —Å–µ—Ä–≤–µ—Ä–µ.\n–ê—Ä–≥—É–º–µ–Ω—Ç–æ–º –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ—Ç –æ—Ç 1 –¥–æ 3, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"/status 2\".', Markup.inlineKeyboard([
                [Markup.button.callback('üíæ /addserver', 'addserver')],
                [Markup.button.callback('üóë /deleteserver', 'deleteserver')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')],
            ]));
        } else if (callId === 'addserver') {
            await ctx.editMessageText('–ö–æ–º–∞–Ω–¥–∞ /addserver –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ª–æ—Ç.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addserver \<ip> \<port> \<slot>.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /addserver play.hypixel.net 25565 1.', Markup.inlineKeyboard([
                [Markup.button.callback('üîå /status', 'status')],
                [Markup.button.callback('üóë /deleteserver', 'deleteserver')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')],
            ]));
        } else if (callId === 'deleteserver') {
            await ctx.editMessageText('–ö–æ–º–∞–Ω–¥–∞ /deleteserver —É–¥–∞–ª—è–µ—Ç –∞–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ª–æ—Ç—É.\n–ê—Ä–≥—É–º–µ–Ω—Ç–æ–º –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ—Ç –æ—Ç 1 –¥–æ 3, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"/deleteserver 3\".', Markup.inlineKeyboard([
                [Markup.button.callback('üîå /status', 'status')],
                [Markup.button.callback('üíæ /addserver', 'addserver')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')],
            ]));
        } else if (callId === 'back') {
            await ctx.editMessageText('üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–∞–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ –Ω–µ–≥–æ:', Markup.inlineKeyboard([
                [Markup.button.callback('üîå /status', 'status')],
                [Markup.button.callback('üíæ /addserver', 'addserver')],
                [Markup.button.callback('üóë /deleteserver', 'deleteserver')]
            ]));
        }
    } catch (e) {
        console.log(e);
    } finally {
        await mdb.close();
    };
});

bot.on('inline_query', async (ctx) => {
    try {
        const text = ctx.inlineQuery.query.trim().split(' ');
        const results = [];

        if (text.length < 0) {
            results.push({
                type: 'article',
                id: 'without_text',
                title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞',
                description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–π–ø–∏ –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"@username example.com 19132\".",
                input_message_content: {
                    message_text: '‚ùå –í–≤–µ–¥–∏—Ç–µ –∞–π–ø–∏ –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"@username example.com 19132\".',
                },
            });
        } else {
            const ip = text[0];
            const port = text[1];
            const res = await serverStatus(ip, port);
            let stat;

            if (res.online === true) {
                stat = `–≤–∫–ª—é—á—ë–Ω!\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>,\nüë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: ${res.players.online}/${res.players.max},\nüìô –í–µ—Ä—Å–∏—è: ${res.version} \nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${res.motd.clean}`;
            } else {
                stat = `–æ—Ç–∫–ª—é—á—ë–Ω.\nüìò –ê–π–ø–∏-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç: <code>${ip}</code>/<code>${port}</code>.`;
            };

            results.push({
                type: 'article',
                id: 'with_text',
                title: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–µ–Ω—è!',
                description: "–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞!",
                input_message_content: {
                    message_text: `üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ - ${stat}`,
                    parse_mode: 'HTML',
                },
            });
        };

        await ctx.answerInlineQuery(results);
    } catch (e) {
        console.log(e);
    };
});

bot.launch();
